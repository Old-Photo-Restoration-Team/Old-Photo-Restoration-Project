import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision.models.resnet import BasicBlock # ResNet Block


class Mapping(nn.Module):
    def __init__(self):
        """
        Initialize the model structure following the paper
        """
        # First 3 conv2d layers
        self.conv1 = nn.Sequential(nn.Conv2d(64, 128, 3, stride=1),
                                    nn.InstaceNorm2d(64),
                                    nn.ReLU(),
                                    nn.Conv2d(128, 256, 3, stride=1), 
                                    nn.InstanceNorm2d(64),
                                    nn.ReLU(), 
                                    nn.Conv2d(256, 512, 3, stride=1), 
                                    nn.InstanceNorm2d(64),
                                    nn.ReLU()
                                    )
        
        #ResNet Blocks x 6
        self.resblocks = nn.Sequential(BasicBlock(512, 512),
                                        nn.InstanceNorm2d(64),
                                        BasicBlock(512, 512),
                                        nn.InstanceNorm2d(64),
                                        BasicBlock(512, 512),
                                        nn.InstanceNorm2d(64),
                                        BasicBlock(512, 512),
                                        nn.InstanceNorm2d(64),
                                        BasicBlock(512, 512),
                                        nn.InstanceNorm2d(64),
                                        BasicBlock(512, 512)
                                        nn.InstanceNorm2d(64),
                                        )
        
        # Second batch of conv2d layer 
        self.conv2 = nn.Sequential(nn.Conv2d(512, 256, 3, stride=1),
                            nn.InstaceNorm2d(64),
                            nn.ReLU(),
                            nn.Conv2d(256, 128, 3, stride=1), 
                            nn.InstanceNorm2d(64),
                            nn.ReLU(), 
                            nn.Conv2d(128, 64, 3, stride=1), 
                            nn.InstanceNorm2d(64),
                            nn.ReLU()
                            )
        
        def forward(self, x):
            """
            Execute forward pass in the model

            Args:
                x (array-like): input of the model (here, latent space generated by VAE1 (union of Zx and Zr))

            Returns:
                array-like: translated latent space to Zy
            """
            out = x
            out = self.conv1(out)
            out = self.resblocks(out)
            out = self.conv2(out)
            return out

